import asyncio
import os
import logging
from posixpath import split
from sqlite3 import DatabaseError
from telebot.async_telebot import AsyncTeleBot
from dotenv import load_dotenv
from yandex_music import ClientAsync
from yandex_music import Playlist
from yandex_music.exceptions import YandexMusicError
import aiosqlite

logging.basicConfig(filename="Log.log", 
                    format='%(asctime)s %(levelname)-8s %(message)s',
                    level=logging.INFO)
                    
logging.info(f"Started an app with PID = {os.getpid()}")
load_dotenv()

token = os.getenv('TELEGRAM_BOT_TOKEN')
bot = AsyncTeleBot(token)

ym_token = os.getenv('YANDEX_MUSIC_TOKEN')
client = ClientAsync(ym_token)

# –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞ (/add_playlist <url> -- –≤–µ—Ä–Ω—ë—Ç url)
def extract_arg(arg):
    if len(arg.split()) > 1:
        return arg.split()[1:]
    else:
        raise Exception

#–ö—Ä—á —è –Ω–∞–¥–µ–ª–∞–ª–∞ –∫—É—á—É –Ω–µ–Ω—É–∂–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤, –Ω–æ –º–Ω–µ –Ω–µ —Å—Ç—ã–¥–Ω–æ

#–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–π–¥–∏ –ø–ª–µ–π–ª–∏—Å—Ç–∞ –∏–∑ —Å—É—â–Ω–æ—Å—Ç–∏
def get_id_from_playlist(playlist : Playlist):
    return playlist.playlistId.split(':')[1]

#–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å—É—â–Ω–æ—Å—Ç–∏
def get_login_from_playlist(playlist : Playlist):
    return playlist.owner.login

#–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–ª–µ–π–ª–∏—Å—Ç –∏–∑ —Å—É—â–Ω–æ—Å—Ç–∏
def get_url_from_playlist(playlist : Playlist):
    return f"https://music.yandex.ru/users/{get_login_from_playlist(playlist)}/playlists/{get_id_from_playlist(playlist)}"

#–¢—ã—Ä–∏–º id –ø–ª–µ–π–ª–∏—Å—Ç–∞ –∏–∑ —Å—Å—ã–ª–∫–∏
def get_playlist_id_from_url(str):
    if (str.find('?') != -1):
        return str[str.find('/playlists/')+len('/playlists/'):str.rfind('?')]
    else:
        return str.split('/')[-1]

#–¢—ã—Ä–∏–º –ª–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å—Å—ã–ª–∫–∏
def get_login_from_url(str):
    return str[str.find('/users/')+len('/users/'):str.rfind('/playlists/')] #str.split('/')[-3]

#–ü–æ–ª—É—á–∞–µ–º —Å—É—â–Ω–æ—Å—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç–∞ –∏–∑ —Å—Å—ã–ª–∫–∏
async def get_playlist_from_url(str):
    x : Playlist = await client.users_playlists(get_playlist_id_from_url(str), get_login_from_url(str))
    return x

#–î–∞–Ω–Ω—ã–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ò–º—è–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:–ê–π–¥–∏–ü–ª–µ–π–ª–∏—Å—Ç–∞
def playlist_to_db(playlist : Playlist):
    return f"{get_login_from_playlist(playlist)}:{get_id_from_playlist(playlist)}"

#–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∞–π–¥–∏ –ø–ª–µ–π–ª–∏—Å—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async def playlist_from_db(str):
    login = str.split(':')[0]
    playlist_id = str.split(':')[1]
    return await client.users_playlists(playlist_id,login)

# –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É, –≤ –∫–æ—Ç–æ—Ä–æ–π —Ö—Ä–∞–Ω–∏—Ç—Å—è —Å–æ–±—Ä–∞–Ω–Ω—ã–π –Ω–∞ –∫–æ–ª–µ–Ω–∫–µ URL –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ç—Ä–µ–∫–∞
async def last_added_track_url_title(playlist : Playlist):
    if playlist.track_count == 0 or playlist is None:
        return "https://music.yandex.ru/album/9046986/track/609676", "You got rickrolled OwO"

    short_track = playlist.tracks[-1]  
    try:
        track = await short_track.fetch_track_async()
    except Exception as error:
        logging.error(error)
        logging.error(f"WEB: could not fetch track {short_track.id} from Playlist {playlist.title}")

    album_id = track.track_id.split(':')[1] 
    track_id = track.track_id.split(':')[0]
    title = track.title

    last_added_track_url = f"https://music.yandex.ru/album/{album_id}/track/{track_id}"
    
    return last_added_track_url, title

#reply_to –Ω–æ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
async def reply_to_message(message, reply):
    try:
        await bot.reply_to(message, reply)
    except Exception as error:
        logging.error(error)
        logging.error(f"WEB: could not send message to user {message.chat.id}")

# #swap_playlists –∏–∑ —Å—Å—ã–ª–æ–∫ –≤ –ò–º—è–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:–ê–π–¥–∏–ü–ª–µ–π–ª–∏—Å—Ç–∞
# @bot.message_handler(commands=['swap_playlists'])
# async def swap_playlists(message):
#     await reply_to_message(message, "–Ø —Ä–∞–±–æ—Ç–∞—é!")
#     try:
#         query = "SELECT * FROM Playlist"
#         cursor = await bot.db.execute(query)
#         rows = await cursor.fetchall()
#         await cursor.close()
#     except DatabaseError as error:
#         logging.error(error)
#         logging.error("DB: Could not read Playlists")
#     # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞:
#     for (playlist_name, last_added_track_db, snapshot) in rows:
#         # –ù–∞—á–∏—Ç–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è –∞–ø–∏—à–∫–∏
#         if (playlist_name.find('music.yandex') != -1):
#             playlist_id = playlist_name.split('/')[-1] 
#             user_log = playlist_name.split('/')[-3]
#             playlist_db_id = f"{user_log}:{playlist_id}"
#             try:
#                 query = "INSERT INTO Playlist (Title, LastAddedTrack, Snapshot) VALUES (?, ?, ?)"
#                 await bot.db.execute(query, (playlist_db_id, last_added_track_db, snapshot))
#                 await bot.db.commit()
#                 logging.info(f"DB: Added playlist {playlist_name}: New id is {playlist_db_id}")
#             except DatabaseError as error:
#                 logging.error(error)
#                 logging.error(f"DB: Could not update playlist {playlist_name} in db")
#             try:
#                 query = "UPDATE Subscription SET playlist_id = ? WHERE playlist_id = ?"
#                 await bot.db.execute(query, (playlist_db_id, playlist_name))
#                 await bot.db.commit()
#                 logging.info(f"DB: Changed subscription for {playlist_name}: New id is {playlist_db_id}")
#             except DatabaseError as error:
#                 logging.error(error)
#                 logging.error(f"DB: Could not update subscription for {playlist_name} in db")
#             try:
#                 query = "DELETE FROM Playlist WHERE Title = ?"
#                 await bot.db.execute(query, (playlist_name,))
#                 await bot.db.commit()
#                 logging.info(f"DB: Deleted playlist {playlist_name}: New id is {playlist_db_id}")
#             except DatabaseError as error:
#                 logging.error(error)
#                 logging.error(f"DB: Could not update playlist {playlist_name} in db")
            

# –û–±—Ä–∞–±–æ—Ç–∫–∞ '/delete_playlist', –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –≤–≤–æ–¥–∞, —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏.
@bot.message_handler(commands=['delete_playlist'])
async def delete_playlist(message):
    # –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
    await reply_to_message(message, "–î–∞–π—Ç–µ –º–∏–Ω—É—Ç–∫—É, —Å–µ–π—á–∞—Å —Å–¥–µ–ª–∞–µ–º üëª")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –≤–≤–æ–¥–∞
    try:
        playlist_link = "/".join(extract_arg(message.text))
        playlist : Playlist = await get_playlist_from_url(playlist_link)
        playlist_name = playlist_to_db(playlist)
    except Exception as error:
        logging.error(error)
        logging.info(f"User {message.chat.id} entered non-valid URL: {message.text}")
        await reply_to_message(message, "–£–∫–∞–∂–∏—Ç–µ –∫–∞–∫–æ–π-–Ω–∏–±—É–¥—å URL, –≤—ã —á–æ üê∑\n–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç—ã –º–æ–∂–Ω–æ –∫–æ–º–∞–Ω–¥–æ–π \"/show\"")
        return
    try:
        query = "DELETE FROM Subscription WHERE User_id = ? AND Playlist_id = ?"
        await bot.db.execute(query, (message.chat.id, playlist_name))
        await bot.db.commit()
        logging.info(f"DB: Deleted Subscription with User_id = {message.chat.id}, Playlist_id = \"{playlist_name}\"")  
    except DatabaseError as error:
        logging.error(error)
        logging.info(f"DB: Seems there were no Subscription with User_id = {message.chat.id}, Playlist_id = \"{playlist_name}\" already existing in db")
    
    await reply_to_message(message, "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø–ª–µ–π–ª–∏—Å—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞! ‚úÖ")
    return


# –û–±—Ä–∞–±–æ—Ç–∫–∞ '/add_playlist', –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –≤–≤–æ–¥–∞, –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞ –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ.
@bot.message_handler(commands=['add_playlist'])
async def add_playlist(message):
    # –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
    await reply_to_message(message, "–î–∞–π—Ç–µ –º–∏–Ω—É—Ç–∫—É, —Å–µ–π—á–∞—Å —Å–¥–µ–ª–∞–µ–º üëª")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –≤–≤–æ–¥–∞
    try:
        playlist_name = "/".join(extract_arg(message.text))
        # –ù–∞—á–∏—Ç–∫–∞ –Ω—É–∂–Ω—ã—Ö –¥–ª—è –∞–ø–∏ —è–º—É–∑—ã–∫–∏ –ø–æ–ª–µ–π, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è, —Ç–æ —à–ª—è–ø–∞ –∫–∞–∫–∞—è-—Ç–æ
        # playlist_id = message.text.split('/')[-1]
        # user = message.text.split('/')[-3]
    except Exception as error:
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.chat.id} –≤–≤—ë–ª –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π URL: {message.text}")
        await reply_to_message(message, "–£–∫–∞–∂–∏—Ç–µ –≤–∞–ª–∏–¥–Ω—ã–π URL —á–µ—Ä–µ–∑ –æ–¥–∏–Ω –ø—Ä–æ–±–µ–ª –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã \"/add_playlist\" üê≥")
        return
    
    # –Ø–º—É–∑—ã–∫–∞ –∞–ø–∏
    try:
        playlist : Playlist = await get_playlist_from_url(playlist_name)
        p_id = playlist_to_db(playlist)
    except YandexMusicError as error:
        logging.error(error)
        logging.info(f"WEB: Seems there is no Playlist with Title = \"{p_id}\"")
        await reply_to_message(message, "–ò–ª–∏ —Ç–∞–∫–æ–≥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏–ª–∏ –º—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å–º–æ—Ç—Ä–∏–º üëÄ")
        return

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –ë–î
    # 1) –ø–ª–µ–π–ª–∏—Å—Ç:
    try:
        last_added_track_url, title = await last_added_track_url_title(playlist)
        query = "INSERT INTO Playlist (Title, LastAddedTrack, Snapshot) VALUES (?, ?, ?)"
        await bot.db.execute(query, (p_id, last_added_track_url, playlist.snapshot))
        await bot.db.commit()
        logging.info(f"DB: Added Playlist with Title = \"{p_id}\", LastAddedTrack = {last_added_track_url}, Snapshot = {playlist.snapshot}")
    except DatabaseError as error:
        logging.error(error)
        logging.info(f"DB: Seems there is a Playlist with Title = \"{p_id}\" already existing in db")
        
    # 2) –ø–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —ç—Ç–æ—Ç –ø–ª–µ–π–ª–∏—Å—Ç:
    try:
        query = "INSERT INTO Subscription (User_id, Playlist_id) VALUES (?, ?)"
        cursor = await bot.db.execute(query, (message.chat.id, p_id))
        await bot.db.commit()
        await cursor.close()
        logging.info(f"DB: Added Subscription with User_id = {message.chat.id}, Playlist_id = \"{p_id}\"")
    except DatabaseError as error:
        logging.error(error)
        logging.info(f"DB: Seems there is a Subscription with User_id = {message.chat.id}, Playlist_id = \"{p_id}\" already existing in db")
    
    await reply_to_message(message, "–ü–ª–µ–π–ª–∏—Å—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ! ‚úÖ")
    return


# –û–±—Ä–∞–±–æ—Ç–∫–∞ '/show', –≤ –æ—Ç–≤–µ—Ç–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –≤—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤
@bot.message_handler(commands=['show'])
async def show_playlists(message):
    logging.info(f"Showing subscriptions to user {message.chat.id}")
    try:
        query = "SELECT * FROM Subscription WHERE User_id = ?"
        cursor = await bot.db.execute(query, (message.chat.id,))
        rows = await cursor.fetchall()
        await cursor.close()
    except DatabaseError as error:
        logging.error(error)
        logging.error(f"DB: Could not read Subscription for user {message.chat.id}")
        

    if len(rows) == 0:
        await reply_to_message(message, "–í—ã –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç–µ –Ω–∏ –æ–¥–∏–Ω –ø–ª–µ–π–ª–∏—Å—Ç ‚ùå")            
    else:
        playlists_list = []
        for (playlist, user) in rows:
            if (playlist.find('music.yandex') != -1):
                playlists_list.append(playlist)
            else:
                #–≤–æ—Ç —Ç—É—Ç –ø–ª–æ—Ö–æ
                playlists_list.append(get_url_from_playlist(await playlist_from_db(playlist)))
        await reply_to_message(message, "üìå\n" + "\nüìå\n".join(playlists_list))


# –û–±—Ä–∞–±–æ—Ç–∫–∞ '/start' –∏ '/help'
@bot.message_handler(commands=['help', 'start'])
async def send_welcome(message):
    try:
        query = "INSERT INTO User (ID) VALUES (?)"
        await bot.db.execute(query, (message.chat.id,))
        await bot.db.commit()
        logging.info(f"DB: Added user with ID {message.chat.id}")
    except DatabaseError:
        logging.info(f"DB: Seems there is a user with ID {message.chat.id} already existing in db")
    
    await reply_to_message(message, """\
üìå–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É \"/add_playlist <URL –ø–ª–µ–π–ª–∏—Å—Ç–∞>\", —á—Ç–æ–±—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ø–ª–µ–π–ª–∏—Å—Ç–µ. \
–ö–æ–≥–¥–∞ –≤ –Ω–µ–≥–æ –¥–æ–±–∞–≤–∏—Ç—Å—è –∫–∞–∫–æ–π-—Ç–æ —Ç—Ä–µ–∫, –≤ —ç—Ç–æ—Ç —á–∞—Ç –ø—Ä–∏–¥—ë—Ç \
—Å—Å—ã–ª–∫–∞ –Ω–∞ –Ω–µ–≥–æ!
üìå–î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –ø–ª–µ–π–ª–∏—Å—Ç—ã –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥–æ–π \"/delete_playlist\"
üìå–ö–æ–º–∞–Ω–¥–∞ \"/show\" –ø–æ–∫–∞–∂–µ—Ç —Ç–µ–∫—É—â–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –ø–ª–µ–π–ª–∏—Å—Ç—ã.
–û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è.
–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –±–æ—è—Ä—Ö–∏–≤ vk.com/boyarchive""")


# –ö–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –ø–ª–µ–π–ª–∏—Å—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –∫–µ–º-—Ç–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é—Ç—Å—è, 
# –∏ —Ä–∞—Å—Å—ã–ª–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö, –µ—Å–ª–∏ —Ç–∞–∫–∏–µ –∏–º–µ—é—Ç—Å—è
async def polling():
    while True:
        # –ù–∞—á–∏—Ç–∞–µ–º –≤—Å–µ –ø–ª–µ–π–ª–∏—Å—Ç—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –∫—Ç–æ-—Ç–æ –ø–æ–¥–ø–∏—Å–∞–Ω
        try:
            query = "SELECT * FROM Playlist"
            cursor = await bot.db.execute(query)
            rows = await cursor.fetchall()
            await cursor.close()
        except DatabaseError as error:
            logging.error(error)
            logging.error("DB: Could not read Playlists")
            continue
        # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞:
        for (playlist_name, last_added_track_db, snapshot) in rows:
            # –ù–∞—á–∏—Ç–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è –∞–ø–∏—à–∫–∏
            if (playlist_name.find('music.yandex') != -1):
                playlist_id = playlist_name.split('/')[-1] 
                user_log = playlist_name.split('/')[-3]
            # –î—ë—Ä–Ω–µ–º –∞–ø–∏—à–∫—É
            try:
                if (playlist_name.find('music.yandex') != -1):
                    playlist = await client.users_playlists(playlist_id, user_log)
                else:
                    playlist = await playlist_from_db(playlist_name)
            except YandexMusicError as error:
                logging.error(error)
                logging.info(f"WEB: Seems there is no Playlist with Title = \"{playlist_name}\"")
                continue # –ï—Å–ª–∏ _–Ω–∞ —ç—Ç–æ–º_ —ç—Ç–∞–ø–µ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫, –ø—Ä–æ—Å—Ç–æ —Å–∫–∏–ø–∞–µ–º —ç—Ç–æ—Ç –ø–ª–µ–π–ª–∏—Å—Ç UwU
            
            last_added_track_url, title = await last_added_track_url_title(playlist)

            if last_added_track_db != last_added_track_url:
                message = f"üéº –ù–æ–≤—ã–π —Ç—Ä–µ–∫ \"{title}\" –≤ –ø–ª–µ–π–ª–∏—Å—Ç–µ \"{playlist.title}\", –≤–æ—Ç —Å—Å—ã–ª–∫–∞:\n{last_added_track_url}"
                logging.info(message)
                # –ù–∞—á–∏—Ç–∞–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –ø–ª–µ–π–ª–∏—Å—Ç–∞
                try:
                    query = "SELECT User_id FROM Subscription where Playlist_id = ?"
                    cursor = await bot.db.execute(query, (playlist_name,))
                    rows = await cursor.fetchall()
                    await cursor.close()
                except DatabaseError as error:
                    logging.error(error)
                    logging.error(f"DB: Could not read Users subscriped to {playlist_name} from db")
                    continue
                # –û–ø–æ–≤–µ—Å—Ç–∏–º –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                for (user,) in rows:
                    logging.info(f"WEB: Sending an update message: to user {user}")
                    try:
                        await bot.send_message(user, message)
                    except Exception as error:
                        logging.error(error)
                        logging.error(f"WEB: Could not send message to user {user}")
                        continue

                # –û–±–Ω–æ–≤–∏–º –ë–î:
                try:
                    query = "UPDATE Playlist SET LastAddedTrack = ? WHERE Title = ?"
                    await bot.db.execute(query, (last_added_track_url, playlist_name))
                    await bot.db.commit()
                    logging.info(f"DB: Updated playlist {playlist_name}: LastAddedTrack was {last_added_track_db}, now {last_added_track_url}")
                except DatabaseError as error:
                    logging.error(error)
                    logging.error(f"DB: Could not update playlist {playlist_name} in db")

        await asyncio.sleep(5)


async def main():
    client = ClientAsync(ym_token)
    await client.init()
    async with aiosqlite.connect('PlaylistUpdateNotifier.db') as bot.db:
        await asyncio.gather(bot.infinity_polling(non_stop=True), polling())


# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–æ–≥–æ –ª—É–ø–∞
while 1:
    try:
        logging.info("starting an app!")        
        asyncio.run(main())
    except Exception as error:
        logging.error(error)
        logging.error(f"Gonna restart the app!")
